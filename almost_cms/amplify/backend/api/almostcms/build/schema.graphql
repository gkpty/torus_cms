type S3Object {
  bucket: String!
  region: String!
  key: String!
}

type Article {
  id: ID!
  title: String!
  body: String!
  file: S3Object
}

type Image {
  id: ID!
  name: String!
  file: S3Object
}

input S3ObjectInput {
  bucket: String!
  region: String!
  key: String!
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelArticleConnection {
  items: [Article]
  nextToken: String
}

input ModelStringFilterInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
}

input ModelIDFilterInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
}

input ModelIntFilterInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  contains: Int
  notContains: Int
  between: [Int]
}

input ModelFloatFilterInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  contains: Float
  notContains: Float
  between: [Float]
}

input ModelBooleanFilterInput {
  ne: Boolean
  eq: Boolean
}

input ModelArticleFilterInput {
  id: ModelIDFilterInput
  title: ModelStringFilterInput
  body: ModelStringFilterInput
  and: [ModelArticleFilterInput]
  or: [ModelArticleFilterInput]
  not: ModelArticleFilterInput
}

type Query {
  getArticle(id: ID!): Article
  listArticles(filter: ModelArticleFilterInput, limit: Int, nextToken: String): ModelArticleConnection
  getImage(id: ID!): Image
  listImages(filter: ModelImageFilterInput, limit: Int, nextToken: String): ModelImageConnection
}

input CreateArticleInput {
  id: ID
  title: String!
  body: String!
  file: S3ObjectInput
}

input UpdateArticleInput {
  id: ID!
  title: String
  body: String
  file: S3ObjectInput
}

input DeleteArticleInput {
  id: ID
}

type Mutation {
  createArticle(input: CreateArticleInput!): Article
  updateArticle(input: UpdateArticleInput!): Article
  deleteArticle(input: DeleteArticleInput!): Article
  createImage(input: CreateImageInput!): Image
  updateImage(input: UpdateImageInput!): Image
  deleteImage(input: DeleteImageInput!): Image
}

type Subscription {
  onCreateArticle: Article @aws_subscribe(mutations: ["createArticle"])
  onUpdateArticle: Article @aws_subscribe(mutations: ["updateArticle"])
  onDeleteArticle: Article @aws_subscribe(mutations: ["deleteArticle"])
  onCreateImage: Image @aws_subscribe(mutations: ["createImage"])
  onUpdateImage: Image @aws_subscribe(mutations: ["updateImage"])
  onDeleteImage: Image @aws_subscribe(mutations: ["deleteImage"])
}

type ModelImageConnection {
  items: [Image]
  nextToken: String
}

input ModelImageFilterInput {
  id: ModelIDFilterInput
  name: ModelStringFilterInput
  and: [ModelImageFilterInput]
  or: [ModelImageFilterInput]
  not: ModelImageFilterInput
}

input CreateImageInput {
  id: ID
  name: String!
  file: S3ObjectInput
}

input UpdateImageInput {
  id: ID!
  name: String
  file: S3ObjectInput
}

input DeleteImageInput {
  id: ID
}
